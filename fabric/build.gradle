plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

version = "${rootProject.mod_version}-${rootProject.minecraft_version}-fabric"

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", rootProject.minecraft_version
    inputs.property "fabric_loader_version", rootProject.fabric_loader_version
    inputs.property "architectury_version", rootProject.architectury_version
    inputs.property "name", rootProject.name
    inputs.property "id", rootProject.id
    inputs.property "description", rootProject.description
    inputs.property "author", rootProject.author
    inputs.property "license", rootProject.license
    inputs.property "fabric_main", rootProject.fabric_main

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": rootProject.minecraft_version,
                "fabric_loader_version": rootProject.fabric_loader_version,
                "architectury_version": rootProject.architectury_version,
                "name": rootProject.name,
                "id": rootProject.id,
                "description": rootProject.description,
                "author": rootProject.author,
                "license": rootProject.license,
                "fabric_main": rootProject.fabric_main
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}