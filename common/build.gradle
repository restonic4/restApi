dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "dev.architectury:architectury:${rootProject.architectury_version}"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'
}

/*tasks.withType(JavaCompile) {
    doFirst {
        def mcVersion = rootProject.minecraft_version
        def mainAccesswidener = project.file("src/main/resources/restapi.accesswidener")
        def lookingAccesswidener = project.file("src/main/resources/restapi_${mcVersion}_.accesswidener")

        if (mainAccesswidener.exists()) {
            println "INFO. Main accesswidener FOUND in ${project.name}"

            if (lookingAccesswidener.exists()) {
                println "INFO. accesswidener for ${mcVersion} FOUND in ${project.name}"

                mainAccesswidener.text = lookingAccesswidener.text
            } else {
                throw new GradleException("ERROR. accesswidener for ${mcVersion} NOT FOUND in ${project.name}.")
            }
        } else {
            throw new GradleException("ERROR. Main accesswidener NOT FOUND in ${project.name}.")
        }
    }
}*/

String replaceIgnore(def name, def toIgnore, def fileData) {
    for(int i = 1; i <= 5; i++) {
        if (i != toIgnore) {
            fileData = fileData.replaceAll(name + i, name + toIgnore)
        }
    }

    return fileData
}

int getVersionIndex() {
    def versionSet3 = ["1.20.2"]
    def versionSet1 = ["1.20", "1.20.1"]
    def versionSet2 = ["1.19.4"]
    def versionSet4 = ["1.19.3"]

    int versionIndex = 0

    if (versionSet1.contains(rootProject.minecraft_version)) {
        versionIndex = 1
    } else if (versionSet2.contains(rootProject.minecraft_version)) {
        versionIndex = 2
    } else if (versionSet3.contains(rootProject.minecraft_version)) {
        versionIndex = 3
    } else if (versionSet4.contains(rootProject.minecraft_version)) {
        versionIndex = 4
    }

    return versionIndex
}

task FixRegistries {
    doLast {
        println("INFO. Fixing registries")

        tasks.withType(JavaCompile) {
            dependsOn FixRegistries

            doFirst{
                println("INFO. Compiling new data in ${project.name}: $apiVersion")
                String apiVersion = project.rootProject.mod_version + "-" + rootProject.minecraft_version
                println "apiVersion in ${project.name}: $apiVersion"

                def mainFile = file('../common/src/main/java/me/restonic4/restapi/RestApi.java')

                if (mainFile.exists()) {
                    println "INFO. MAIN FILE FOUND in ${project.name}"

                    def mainCode = mainFile.text

                    if (apiVersion.contains("t")) {
                        println "DEBUG. T IS PRESENT ON API VERSION in ${project.name}"

                        println "BUILDING A TEST_BUILD IN ${project.name}"

                        mainCode = mainCode.replaceAll('isATestBuild = false', 'isATestBuild = true')
                        mainFile.text = mainCode
                    } else {
                        println "DEBUG. T NOT PRESENT ON API VERSION in ${project.name}"

                        mainCode = mainCode.replaceAll('isATestBuild = true', 'isATestBuild = false')
                        mainFile.text = mainCode
                    }
                } else {
                    throw new GradleException("ERROR. MAIN FILE NOT FOUND in ${project.name}. CAN'T CHANGE VARIABLE TO ENABLE/DISABLE TESTING CLASSES.")
                }

                def javaFilesToModify = [
                        '../common/src/main/java/me/restonic4/restapi/block/BlockRegistry.java',
                        '../common/src/main/java/me/restonic4/restapi/item/ItemRegistry.java',
                        '../common/src/main/java/me/restonic4/restapi/creative_tab/CreativeTabRegistry.java',
                        '../common/src/main/java/me/restonic4/restapi/sound/SoundRegistry.java',
                        '../common/src/main/java/me/restonic4/restapi/util/CustomBlockProperties.java',
                        '../common/src/main/java/me/restonic4/restapi/util/CustomItemProperties.java',
                        '../common/src/main/java/me/restonic4/restapi/util/CustomToolTier.java',
                        "../common/src/main/java/me/restonic4/restapi/worldgen/ore/OreGenerator.java",
                        "../common/src/main/java/me/restonic4/restapi/util/BiomeConditions.java",
                        "../common/src/main/java/me/restonic4/restapi/util/CustomBiomeTags.java",
                        "../common/src/main/java/me/restonic4/restapi/util/CustomArmorMaterial.java",
                        "../common/src/main/java/me/restonic4/restapi/holder/RestItem.java",
                        "../common/src/main/java/me/restonic4/restapi/holder/RestBlock.java",
                        "../common/src/main/java/me/restonic4/restapi/holder/RestCreativeTab.java",
                        "../common/src/main/java/me/restonic4/restapi/holder/RestSound.java",
                        "../common/src/main/java/me/restonic4/restapi/util/InternalAdvancementTrigger.java",
                        "../common/src/main/java/me/restonic4/restapi/util/AdvancementTrigger.java"
                ]

                javaFilesToModify.each { filePath ->
                    def javaFile = file(filePath)

                    if (javaFile.exists()) {
                        def javaCode = javaFile.text
                        int versionIndex = getVersionIndex()

                        def className = filePath.tokenize('/').last().tokenize('.').first()
                        javaCode = replaceIgnore("${className}Set", versionIndex, javaCode)

                        javaFile.text = javaCode
                    }
                }
            }
        }
    }
}

tasks.matching { it != FixRegistries }.all { it.dependsOn FixRegistries }

loom {
    accessWidenerPath = file("src/main/resources/restapi.accesswidener")
}

architectury {
    common((rootProject.enabled_platforms.tokenize(',') as List<String>))
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    repositories { }
}
