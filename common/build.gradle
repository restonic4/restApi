dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "dev.architectury:architectury:${rootProject.architectury_version}"
}

String replaceIgnore(def name, def toIgnore, def fileData) {
    for(int i = 1; i <= 5; i++) {
        if (i != toIgnore) {
            fileData = fileData.replaceAll(name + i, name + toIgnore)
        }
    }

    return fileData
}

int getVersionIndex() {
    def versionSet3 = ["1.20.2"]
    def versionSet1 = ["1.20", "1.20.1"]
    def versionSet2 = ["1.19.3", "1.19.4"]

    int versionIndex = 0

    if (versionSet1.contains(rootProject.minecraft_version)) {
        versionIndex = 1
    } else if (versionSet2.contains(rootProject.minecraft_version)) {
        versionIndex = 2
    } else if (versionSet3.contains(rootProject.minecraft_version)) {
        versionIndex = 3
    }

    return versionIndex
}

task FixRegistries {
    doLast {
        println("INFO. Fixing registries")

        tasks.withType(JavaCompile) {
            dependsOn FixRegistries

            doFirst{
                println("IN_FO. Compiling new data in ${project.name}: $apiVersion")
                String apiVersion = project.rootProject.mod_version
                println "apiVersion in ${project.name}: $apiVersion"

                def mainFile = file('../common/src/main/java/me/restonic4/restapi/RestApi.java')

                if (mainFile.exists()) {
                    println "INFO. MAIN FILE FOUND in ${project.name}"

                    def mainCode = mainFile.text

                    if (apiVersion.contains("t")) {
                        println "DEBUG. T IS PRESENT ON API VERSION in ${project.name}"

                        println "BUILDING A TEST_BUILD IN ${project.name}"

                        mainCode = mainCode.replaceAll('isATestBuild = false', 'isATestBuild = true')
                        mainFile.text = mainCode
                    } else {
                        println "DEBUG. T NOT PRESENT ON API VERSION in ${project.name}"

                        mainCode = mainCode.replaceAll('isATestBuild = true', 'isATestBuild = false')
                        mainFile.text = mainCode
                    }
                } else {
                    throw new GradleException("ERROR. MAIN FILE NOT FOUND in ${project.name}. CAN'T CHANGE VARIABLE TO ENABLE/DISABLE TESTING CLASSES.")
                }

                def blockRegistry = file('../common/src/main/java/me/restonic4/restapi/block/BlockRegistry.java')

                if (blockRegistry.exists()) {
                    def blockRegistryCode = blockRegistry.text
                    int versionIndex = getVersionIndex()

                    blockRegistryCode = replaceIgnore('BlockRegistrySet', versionIndex, blockRegistryCode)

                    blockRegistry.text = blockRegistryCode
                }

                def itemRegistry = file('../common/src/main/java/me/restonic4/restapi/item/ItemRegistry.java')

                if (itemRegistry.exists()) {
                    def itemRegistryCode = itemRegistry.text
                    int versionIndex = getVersionIndex()

                    itemRegistryCode = replaceIgnore('ItemRegistrySet', versionIndex, itemRegistryCode)

                    itemRegistry.text = itemRegistryCode
                }

                def creativeTabRegistry = file('../common/src/main/java/me/restonic4/restapi/creative_tab/CreativeTabRegistry.java')

                if (creativeTabRegistry.exists()) {
                    def creativeTabRegistryCode = creativeTabRegistry.text
                    int versionIndex = getVersionIndex()

                    creativeTabRegistryCode = replaceIgnore('CreativeTabRegistrySet', versionIndex, creativeTabRegistryCode)

                    creativeTabRegistry.text = creativeTabRegistryCode
                }

                def soundRegistry = file('../common/src/main/java/me/restonic4/restapi/sound/SoundRegistry.java')

                if (soundRegistry.exists()) {
                    def soundRegistryCode = soundRegistry.text
                    int versionIndex = getVersionIndex()

                    soundRegistryCode = replaceIgnore('SoundRegistrySet', versionIndex, soundRegistryCode)

                    soundRegistry.text = soundRegistryCode
                }

                def customBlockProperties = file('../common/src/main/java/me/restonic4/restapi/util/CustomBlockProperties.java')

                if (customBlockProperties.exists()) {
                    def customBlockPropertiesCode = customBlockProperties.text
                    int versionIndex = getVersionIndex()

                    customBlockPropertiesCode = replaceIgnore('CustomBlockPropertiesSet', versionIndex, customBlockPropertiesCode)

                    customBlockProperties.text = customBlockPropertiesCode
                }

                def customItemProperties = file('../common/src/main/java/me/restonic4/restapi/util/CustomItemProperties.java')

                if (customItemProperties.exists()) {
                    def customItemPropertiesCode = customItemProperties.text
                    int versionIndex = getVersionIndex()

                    customItemPropertiesCode = replaceIgnore('CustomItemPropertiesSet', versionIndex, customItemPropertiesCode)

                    customItemProperties.text = customItemPropertiesCode
                }

                def customToolTier = file('../common/src/main/java/me/restonic4/restapi/util/CustomToolTier.java')

                if (customToolTier.exists()) {
                    def customToolTierCode = customToolTier.text
                    int versionIndex = getVersionIndex()

                    customToolTierCode = replaceIgnore('CustomToolTierSet', versionIndex, customToolTierCode)

                    customToolTier.text = customToolTierCode
                }
            }
        }
    }
}

tasks.matching { it != FixRegistries }.all { it.dependsOn FixRegistries }

architectury {
    common("fabric", "forge")
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    repositories { }
}
